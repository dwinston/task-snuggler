{"version":3,"file":"/packages/google-calendar-sync.js","sources":["google-calendar-sync/initialize.js","google-calendar-sync/fetch.js","google-calendar-sync/insert.js","google-calendar-sync/update.js","google-calendar-sync/remove.js"],"names":[],"mappings":";;;;;;;;AAAA,kB;AACA,0D;AACA,4D;AACA,oE;;AAEA,oE;AACA,kC;AACA,gC;AACA,kC;;AAEA,Y;AACA,2D;AACA,+B;AACA,gC;AACA,gD;AACA,yC;AACA,0E;AACA,6C;AACA,I;;AAEA,0C;AACA,iC;AACA,I;;AAEA,mE;AACA,2D;AACA,yE;AACA,yC;AACA,sD;AACA,wD;AACA,6D;AACA,oC;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;;ACjCA,kB;AACA,8E;AACA,kD;;;AAGA,0B;AACA,2C;AACA,sB;AACA,G;AACA,G;;AAEA,0B;AACA,gD;AACA,6C;AACA,oB;AACA,gD;AACA,G;AACA,G;;AAEA,+B;AACA,W;AACA,6C;AACA,0B;AACA,8B;AACA,sC;AACA,iE;AACA,yD;AACA,W;AACA,sD;AACA,O;AACA,O;AACA,E;;AAEA,6B;AACA,8B;AACA,kB;AACA,4C;AACA,mC;AACA,oC;AACA,K;AACA,c;AACA,E;;AAEA,iC;AACA,+B;AACA,4D;AACA,W;AACA,G;AACA,2D;AACA,e;AACA,sD;AACA,qD;AACA,W;AACA,G;;AAEA,uE;AACA,qD;AACA,wD;AACA,oD;;AAEA,W;AACA,wD;AACA,K;AACA,0B;AACA,e;AACA,2B;AACA,6B;AACA,4D;AACA,yD;AACA,O;AACA,M;AACA,8B;AACA,sC;AACA,qD;AACA,c;AACA,iE;AACA,O;AACA,O;AACA,E;;AAEA,mC;AACA,c;AACA,oB;AACA,6B;AACA,0B;AACA,2C;AACA,uC;AACA,mB;AACA,mC;AACA,mB;AACA,I;AACA,iE;AACA,6B;AACA,E;;;;;;;;;;;;;;;;;;;AC7FA,0B;AACA,sD;AACA,oC;AACA,sC;AACA,K;AACA,K;AACA,G;;AAEA,0B;AACA,oD;AACA,qB;AACA,qE;AACA,sE;AACA,sE;AACA,iD;AACA,uE;AACA,4E;AACA,gD;AACA,wE;AACA,G;;AAEA,0B;AACA,wE;AACA,iC;AACA,K;AACA,K;AACA,G;;AAEA,0C;AACA,Y;AACA,uD;AACA,K;AACA,0B;AACA,a;AACA,0E;AACA,8E;AACA,yE;AACA,O;AACA,M;AACA,oB;AACA,E;;AAEA,2C;AACA,Y;AACA,iC;AACA,K;AACA,0B;AACA,qC;AACA,M;AACA,8B;AACA,sC;AACA,8C;AACA,2D;AACA,O;AACA,O;AACA,E;;AAEA,6C;AACA,uE;AACA,E;;;;;;;;;;;;;;;;;;;AC3DA,2C;AACA,W;AACA,2E;AACA,K;AACA,0B;AACA,a;AACA,6B;AACA,2B;AACA,sB;AACA,O;AACA,M;AACA,kB;AACA,I;AACA,E;;AAEA,oC;AACA,W;AACA,+C;AACA,K;AACA,0B;AACA,a;AACA,+B;AACA,O;AACA,M;AACA,kB;AACA,I;AACA,E;;AAEA,8C;AACA,mE;AACA,E;;;;;;;;;;;;;;;;;;;AC9BA,sC;AACA,W;AACA,6C;AACA,0B;AACA,kB;AACA,I;AACA,E;;AAEA,6C;AACA,W;AACA,gE;AACA,0B;AACA,kB;AACA,I;AACA,E;;AAEA,6C;AACA,mE;AACA,E","sourcesContent":["authHeader = null;\ngCalAPIprefix =  \"https://www.googleapis.com/calendar/v3\";\nappEvents = (typeof Events === \"undefined\") ? null : Events;\nappCalendars = (typeof Calendars == \"undefined\") ? null : Calendars;\n\n// Options for specifying the relationship between the application's\n// event and calendar collections.\nappCalendarHasMany = \"eventIds\";\nappEventHasOne     = \"calendarId\";\n\nGCalSync = {\n  // Input: a Meteor.user().services.google object that has\n  //   an accessToken property.\n  setAuth: function (googAuth) {\n    var auth = 'Bearer ' + googAuth.accessToken;\n    authHeader = {'Authorization': auth};\n    // tsnugTODO: use googAuth.expiresAt to prompt user to reauthenticate.\n    Session.set('GCalSync.authorized', true);\n  },\n\n  setEvents: function (meteorCollection) {\n    appEvents = meteorCollection;\n  },\n\n  // Input: the Meteor.Collection to use, and options that specify \n  // what enumerates its event ids (default 'eventIds') and\n  // the name of the foreign key in appEvents that refers to its calendar\n  // ('commitmentId' in Task Snuggler).  \n  setCalendars: function (meteorCollection, options) {\n    appCalendarHasMany = options.eventIds || \"eventIds\";\n    appEventHasOne = options.eventForeignKey || \"calendarId\";\n    appCalendars = meteorCollection;\n  }\n};\n","calendarList = [];\ngetCalendarList = refreshEvents = getEvents = insertAppEvent = function () {};\nSession.setDefault('GCalSync.wantsRefresh', true);\n\n\nDeps.autorun(function () {\n  if (Session.get('GCalSync.authorized')) {\n    getCalendarList();\n  }\n});\n\nDeps.autorun(function () {\n  if (Session.get('GCalSync.hasCalendarList') &&\n      Session.get('GCalSync.wantsRefresh')) {\n    refreshEvents();\n    Session.set('GCalSync.wantsRefresh', false);\n  }\n});\n\ngetCalendarList = function () {\n  HTTP.get(\n    gCalAPIprefix + \"/users/me/calendarList\",\n    {headers: authHeader},\n    function (error, result) {\n      if (result.statusCode === 200) {\n        calendarList = _.filter(result.data.items, function (c) {\n          return c.selected && (c.summary !== \"Weather\");\n        });\n        Session.set('GCalSync.hasCalendarList', true);\n      }\n    });\n};\n\nrefreshEvents = function () {\n  var now = moment().toDate();\n  appEvents.find({\n    gCalEvent: true, lastUpdated: {$lt: now}\n  }).forEach(function (gCalEvent) {\n    appEvents.remove(gCalEvent._id);\n  });\n  getEvents();\n};\n\ngetEvents = function (calendar) {\n  if (arguments.length === 0) {\n    _.forEach(calendarList, function (c) { getEvents(c); });\n    return;\n  }\n  var appCal = appCalendars.findOne({gCalId: calendar.id});\n  if (appCal) {\n    // App manages this calendar. Do not override with\n    // event modififications made in Google Calendar.\n    return;\n  }\n\n  // Only fetch events that would display in the current calendar view.\n  var cView = $('#calendar').fullCalendar('getView');\n  var startOfWeek = moment(cView.start).startOf('week');\n  var endOfWeek = moment(startOfWeek).endOf('week');\n\n  HTTP.get(\n    gCalAPIprefix + \"/calendars/\"+calendar.id+\"/events\",\n    {\n      headers: authHeader,\n      params: {\n        singleEvents: true,\n        orderBy: \"startTime\",\n        timeMin: startOfWeek.format(\"YYYY-MM-DDTHH:mm:ssZ\"),\n        timeMax: endOfWeek.format(\"YYYY-MM-DDTHH:mm:ssZ\")\n      }\n    },\n    function (error, result) {\n      if (result.statusCode === 200) {\n        _.forEach(result.data.items, insertAppEvent);\n      } else {\n        console.log(\"could not fetch events for \" + calendar.id);\n      }\n    });\n};\n\ninsertAppEvent = function (event) {\n  appEvent = {\n    gCalEvent: true,\n    userId: Meteor.userId(), \n    title: event.summary, \n    start: new Date(event.start.dateTime), \n    end: new Date(event.end.dateTime), \n    allDay: false, \n    lastUpdated: moment().toDate(),\n    editable: false\n  };\n  appEvent[appEventHasOne] = 0; // e.g. event[\"commitmentId\"] = 0\n  appEvents.insert(appEvent);\n};\n","Deps.autorun(function () {\n  appCalendars && appCalendars.find().observeChanges({\n    added: function (id, calendar) {\n      insertCalendar(appId, calendar);\n    }\n  });\n});\n\nDeps.autorun(function () {\n  var added = Session.get('GCalSync.calendarAdded');\n  if (!added) return;\n  // tsnugTODO: I don't like that this package reaches into the app's\n  // calendars collection and stores a reference to the app calendar's\n  // corresponding Google calendar. A polite Meteor package shouldn't \n  // do that. One option around this is to prefix\n  // all inserted Google calendars so as to be easily connected to the \n  // database, e.g. the Google calendar summary \"tsnug: jogging\" corresponds\n  // to appCalendars.findOne({title: 'jogging'})\n  appCalendars.update(added.appId, {$set: {gCalId: added.calendar.id}});\n});\n\nDeps.autorun(function () {\n  appEvents && appEvents.find({gCalEvent: {$ne: true}}).observeChanges({\n    added: function (id, event) {\n    }\n  });\n});\n\ninsertEvent = function(event, calendarId){\n  HTTP.post(\n    gcalAPIprefix + \"/calendars/\"+calendarId+\"/events\",\n    {\n      headers: authHeader,\n      data: {\n        summary: event.title, // perhaps change to \"tsnug: \" + event.title\n        start: {dateTime: moment(event.start).format(\"YYYY-MM-DDTHH:mm:ssZ\")},\n        end: {dateTime: moment(event.end).format(\"YYYY-MM-DDTHH:mm:ssZ\")}\n      }\n    },\n    insertCallBack);\n};\n\ninsertCalendar = function(appId, calendar){\n  HTTP.post(\n    gcalAPIprefix + \"/calendars\",\n    {\n      headers: authHeader,\n      data: {summary: calendar.title}\n    },\n    function (error, result) {\n      if (result.statusCode === 200) {\n        Session.set(\"GCalSync.calendarAdded\", \n                    {appId: appId, calendar: result.data});\n      }\n    });\n};\n\nvar insertCallBack = function(error, result){\n  if (result.statusCode != 200) console.log('GCalSync: insert failed');\n};\n","updateEvent = function (calendarId, event){\n  HTTP.put(\n    gcalAPIprefix + \"/calendars/\" + calendarId + \"/events/\" + event.gCalId,\n    {\n      headers: authHeader,\n      data: {\n        summary: event.title,\n        start: event.start,\n        end: event.end\n      }\n    },\n    updateCallBack\n  );\n};\n\nupdateCalendar = function(calendar){\n  HTTP.put(\n    gcalAPIprefix + \"/calendars/\" + calendarId,\n    {\n      headers: authHeader,\n      data: {\n        summary: calendar.title\n      }\n    },\n    updateCallBack\n  );\n};\n\nvar updateCallBack = function (error, result){\n  if (result.statusCode != 200) console.log('return code not 200');\n};\n","removeCalendar = function(calendarId){\n  HTTP.del(\n    gcalAPIprefix + \"/calendars/\"+calendarId,\n    {headers: authHeader},\n    removeCallBack\n  );\n};\n\nremoveEvent = function (eventId, calendarId){\n  HTTP.del(\n    gcalAPIprefix + \"/calendars/\"+calendarId+\"/events/\"+eventId,\n    {headers: authHeader},\n    removeCallBack\n  );\n};\n\nvar removeCallBack = function(error, result){\n  if (result.statusCode != 200) console.log('return code not 200');\n};\n"]}